import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
import PIL.Image
import matplotlib.pyplot as plt

# Load the neural style transfer model from TensorFlow Hub
def load_model():
    return hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')

# Load and preprocess the image
def load_image(image_path, max_dim=512):
    img = PIL.Image.open(image_path)
    img = img.convert('RGB')  # Ensure image is in RGB format
    
    # Resize the image while maintaining the aspect ratio
    long_dim = max(img.size)
    scale = max_dim / long_dim
    img = img.resize(
        (int(img.size[0] * scale), int(img.size[1] * scale)),
        PIL.Image.ANTIALIAS
    )
    
    # Convert image to tensor and normalize
    img = np.array(img)
    img = tf.convert_to_tensor(img, dtype=tf.float32)
    img = img[tf.newaxis, ...] / 255.0  # Add batch dimension and normalize
    return img

# Display the image
def display_image(image_tensor):
    plt.figure(figsize=(10, 10))
    plt.imshow(image_tensor[0])
    plt.axis('off')
    plt.show()

# Perform neural style transfer
def apply_style_transfer(content_image_path, style_image_path):
    model = load_model()

    # Load content and style images
    content_image = load_image(content_image_path)
    style_image = load_image(style_image_path)

    # Apply style transfer
    stylized_image = model(content_image, style_image)[0]

    # Display the stylized image
    display_image(stylized_image)
    return stylized_image

if __name__ == "__main__":
    print("--- Neural Style Transfer ---")
    content_path = input("Enter the path to the content image: ")
    style_path = input("Enter the path to the style image: ")

    try:
        result_image = apply_style_transfer(content_path, style_path)
        print("Style transfer completed!")
    except Exception as e:
        print(f"Error during style transfer: {e}")
